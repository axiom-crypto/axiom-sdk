// Generated by dts-bundle-generator v8.0.1

import { Halo2Wasm } from '@axiom-crypto/halo2-js/wasm/web';
import { CircuitValue } from '@axiom-crypto/halo2-js';

declare enum HeaderField {
	ParentHash = 0,
	Sha3Uncles = 1,
	Miner = 2,
	StateRoot = 3,
	TransactionsRoot = 4,
	ReceiptsRoot = 5,
	Difficulty = 7,
	Number = 8,
	GasLimit = 9,
	GasUsed = 10,
	Timestamp = 11,
	ExtraData = 12,
	MixHash = 13,
	Nonce = 14,
	BaseFeePerGas = 15,
	WithdrawalsRoot = 16,
	Hash = 17,
	Size = 18
}
declare enum AccountField {
	Nonce = 0,
	Balance = 1,
	StorageRoot = 2,
	CodeHash = 3
}
declare enum TxField {
	ChainId = 0,
	Nonce = 1,
	MaxPriorityFeePerGas = 2,
	MaxFeePerGas = 3,
	GasLimit = 4,
	To = 5,
	Value = 6,
	Data = 7,
	GasPrice = 8,
	v = 9,
	r = 10,
	s = 11
}
declare enum ReceiptField {
	Status = 0,
	PostState = 1,
	CumulativeGas = 2,
	Logs = 4
}
declare class CircuitValue256 {
	private _value;
	private circuitValue;
	private circuit;
	constructor(circuit: Halo2Wasm, { value, hi, lo }: {
		value?: bigint | string | number;
		hi?: CircuitValue;
		lo?: CircuitValue;
	});
	hi(): CircuitValue;
	lo(): CircuitValue;
	hex(): string;
	value(): bigint;
	toCircuitValue(): CircuitValue;
}
export type AccountEnumKeys = Uncapitalize<keyof typeof AccountField>;
export type AccountEnumKeyFields = {
	[key in AccountEnumKeys]: () => CircuitValue256;
};
export interface Account extends AccountEnumKeyFields {
}
/**
 * Represents a log entry in a receipt.
 */
export interface Log {
	/**
	 * Retrieves the value of a specific topic in the log entry.
	 *
	 * @param topicIdx The index of the topic.
	 * @param eventSchema The event schema.
	 * @returns A `CircuitValue` representing the value of the topic.
	 */
	topic: (topicIdx: RawCircuitInput | CircuitValue, eventSchema?: string | CircuitValue256) => CircuitValue256;
	/**
	 * Retrieves the address a log was emitted from
	 *
	 * @returns A `CircuitValue` representing `Log.address`.
	 */
	address: () => CircuitValue256;
	/**
	 * Retrieves a 32 byte chunk of a log's data field.
	 *
	 * @param dataIdx The index of the 32 byte chunk
	 * @param eventSchema The event schema.
	 * @returns A `CircuitValue256` representing the 32 byte chunk of the log data.
	 */
	data: (dataIdx: CircuitValue | RawCircuitInput, eventSchema?: string | CircuitValue256) => CircuitValue256;
}
export type ReceiptEnumKeys = Uncapitalize<keyof typeof ReceiptField>;
export type ReceiptEnumKeyFieldsUnfiltered = {
	[key in ReceiptEnumKeys]: () => CircuitValue256;
};
export type ReceiptEnumKeyFields = Omit<ReceiptEnumKeyFieldsUnfiltered, "logs" | "postState" | "logsBloom">;
declare enum SpecialReceiptField {
	TxType = 51,
	BlockNumber = 52,
	TxIdx = 53
}
export type SpecialReceiptKeys = Uncapitalize<keyof typeof SpecialReceiptField>;
export type SpecialReceiptKeyFields = {
	[key in SpecialReceiptKeys]: () => CircuitValue256;
};
/**
 * Represents a receipt.
 */
export interface Receipt extends ReceiptEnumKeyFields, SpecialReceiptKeyFields {
	/**
	 * Retrieves a log entry in the receipt.
	 *
	 * @param logIdx The index of the log entry.
	 * @returns A `Log` object representing the log entry.
	 */
	log: (logIdx: RawCircuitInput | CircuitValue) => Log;
	/**
	 * Retrieves a 32 byte chunk of the logs bloom.
	 *
	 * @param logsBloomIdx The index of the 32 byte chunk in [0,8)
	 * @returns A `CircuitValue256` representing the 32 byte chunk of the logs bloom.
	 */
	logsBloom: (logsBloomIdx: RawCircuitInput) => CircuitValue256;
}
export type HeaderEnumKeys = Uncapitalize<keyof typeof HeaderField>;
export type HeaderEnumKeyFieldsUnfiltered = {
	[key in HeaderEnumKeys]: () => CircuitValue256;
};
export type HeaderEnumKeyFields = Omit<HeaderEnumKeyFieldsUnfiltered, "logsBloom">;
export interface Header extends HeaderEnumKeyFields {
	/**
	 * Retrieves a 32 byte chunk of the logs bloom.
	 *
	 * @param logsBloomIdx The index of the 32 byte chunk in [0,8)
	 * @returns A `CircuitValue256` in representing the 32 byte chunk of the logs bloom.
	 */
	logsBloom: (logsBloomIdx: RawCircuitInput) => CircuitValue256;
}
/**
 * Represents the storage of a contract.
 */
export interface Storage {
	/**
	 * Retrieves the value stored at a specific slot in the contract's storage.
	 *
	 * @param slot - The slot to retrieve the value from.
	 * @returns A `CircuitValue` representing the value stored at the slot.
	 */
	slot: (slot: RawCircuitInput | CircuitValue256 | CircuitValue) => CircuitValue256;
}
declare enum SpecialTxFields {
	Type = 51,
	BlockNumber = 52,
	TxIdx = 53,
	FunctionSelector = 54,
}
export type SpecialTxKeys = Uncapitalize<keyof typeof SpecialTxFields>;
export type SpecialTxKeyFields = {
	[key in SpecialTxKeys]: () => CircuitValue256;
};
export type TxEnumKeys = Uncapitalize<keyof typeof TxField>;
export type TxEnumKeyFields = {
	[key in TxEnumKeys]: () => CircuitValue256;
};
export interface BaseTx extends TxEnumKeyFields {
}
export interface SpecialTx extends SpecialTxKeyFields {
}
export interface Tx extends BaseTx, SpecialTx {
	/**
	 * Retrieves a 32 byte chunk of the transaction calldata.
	 *
	 * @param calldataIdx The index of the 32 byte chunk
	 * @returns A `CircuitValue256` in representing the 32 byte chunk of the tx calldata.
	 */
	calldata: (calldataIdx: CircuitValue | RawCircuitInput) => CircuitValue256;
	/**
	 * Retrieves a 32 byte chunk of a contract deployment's transaction data.
	 *
	 * @param contractDataIdx The index of the 32 byte chunk
	 * @returns A `CircuitValue256` in representing the 32 byte chunk of the contract deploy data.
	 */
	contractData: (contractDataIdx: CircuitValue | RawCircuitInput) => CircuitValue256;
}
export interface SolidityMapping {
	/**
	 * Retrieves the value of a specific key in the mapping.
	 *
	 * @param key The key of the mapping.
	 * @returns A `CircuitValue` representing the value of the key in the mapping.
	 */
	key: (key: RawCircuitInput | CircuitValue256 | CircuitValue) => CircuitValue256;
	/**
	 * Retrieves the value of a nested mapping at a specific depth and with specific keys.
	 *
	 * @param mappingDepth The depth of the nested mapping.
	 * @param keys The keys to access the nested mapping.
	 * @returns A `CircuitValue` representing the value of the nested mapping.
	 */
	nested: (keys: (RawCircuitInput | CircuitValue256 | CircuitValue)[]) => CircuitValue256;
}
export type RawCircuitInput = string | number | bigint;
/**
 * Retrieves the account information for a specific block and address.
 *
 * @param blockNumber The block number.
 * @param address The address of the account.
 * @returns An `Account` object to fetch individual account fields.
 */
declare const getAccount: (blockNumber: number | CircuitValue, address: string | CircuitValue) => Readonly<Account>;
/**
 * Retrieves the receipt information for a specific transaction hash.
 *
 * @param blockNumber The block number
 * @param txIdx The transaction index in the block
 * @returns A `Receipt` object to fetch individual receipt fields.
 */
declare const getReceipt: (blockNumber: number | CircuitValue, txIdx: number | CircuitValue) => Readonly<Receipt>;
/**
 * Retrieves the storage information for a specific block and address.
 *
 * @param blockNumber The block number.
 * @param address The address of the contract.
 * @returns A `Storage` object to fetch individual storage slots.
 */
declare const getStorage: (blockNumber: number | CircuitValue, address: string | CircuitValue) => Readonly<Storage>;
/**
 * Retrieves the transaction information for a specific transaction hash.
 *
 * @param blockNumber The block number
 * @param txIdx The transaction index in the block
 * @returns A `Tx` object to fetch individual transaction fields.
 */
declare const getTx: (blockNumber: number | CircuitValue, txIdx: number | CircuitValue) => Readonly<Tx>;
/**
 * Retrieves the header information for a specific block number.
 *
 * @param blockNumber The block number.
 * @returns A `Header` object to fetch individual header fields.
 */
declare const getHeader: (blockNumber: number | CircuitValue) => Readonly<Header>;
/**
 * Retrieves the solidity mapping information for a specific block, address, and slot.
 *
 * @param blockNumber The block number.
 * @param address The address of the contract.
 * @param slot The slot of the mapping.
 * @returns A `SolidityMapping` object to fetch individual mapping slots.
 */
declare const getSolidityMapping: (blockNumber: number | CircuitValue, address: string | CircuitValue, slot: number | bigint | string | CircuitValue256 | CircuitValue) => Readonly<SolidityMapping>;
/**
 * Creates a `CircuitValue256` from a hi-lo `CircuitValue` pair.
 * 
 * @param hi The hi `CircuitValue`.
 * @param lo The lo `CircuitValue`.
 * @returns A `CircuitValue256` object
 */
declare const getCircuitValue256FromHiLo: (hi: CircuitValue, lo: CircuitValue) => CircuitValue256;
/**
 * Creates a `CircuitValue256` from a `RawCircuitInput`.
 * 
 * @param a The raw circuit input.
 * @returns A `CircuitValue256` witness object
 */
declare const getCircuitValue256: (a: RawCircuitInput) => CircuitValue256;
/**
 * Adds a circuit value to the callback.
 *
 * @param a The circuit value to add to the callback.
 */
declare const addToCallback: (a: CircuitValue | CircuitValue256) => void;